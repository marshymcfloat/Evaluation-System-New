// datasource and generator definitions remain the same

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Student {
  id          String   @id @default(uuid())
  studentID   String   @unique
  name        String   
  password    String

  subjects    StudentSubject[]
  evaluations Evaluation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Instructor {
  id           String   @id @default(uuid())
  instructorID String   @unique
  name         String   
  password     String

  subjects     InstructorSubject[]
  evaluations  Evaluation[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
} 


model Admin {
  id        String   @id @default(uuid())
  adminID   String   @unique
  name      String   
  password  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subject {
  id          String @id @default(uuid())
  subjectCode String @unique
  name        String @unique

  students    StudentSubject[]
  instructors InstructorSubject[]
  evaluations Evaluation[] // Added: A subject can be part of many evaluations

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StudentSubject {
  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String

  assignedAt DateTime @default(now())

  @@id([studentId, subjectId])
}

model InstructorSubject {
  instructor   Instructor @relation(fields: [instructorId], references: [id])
  instructorId String

  subject      Subject @relation(fields: [subjectId], references: [id])
  subjectId    String

  assignedAt DateTime @default(now())

  @@id([instructorId, subjectId])
}



model Question {
  id           String   @id @default(uuid())
  questionText String   
  category     String   
  isActive     Boolean  @default(true) 

  responses    EvaluationResponse[] 

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Evaluation {
  id           String   @id @default(uuid())
  comments     String?  

  student      Student    @relation(fields: [studentId], references: [id])
  studentId    String
  instructor   Instructor @relation(fields: [instructorId], references: [id])
  instructorId String
  subject      Subject    @relation(fields: [subjectId], references: [id])
  subjectId    String

  responses    EvaluationResponse[]

  submittedAt  DateTime   @default(now())

  @@unique([studentId, instructorId, subjectId])
}

model EvaluationResponse {
  rating       Int
  
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id])
  evaluationId String

  question     Question   @relation(fields: [questionId], references: [id])
  questionId   String     

  @@id([evaluationId, questionId]) 
}